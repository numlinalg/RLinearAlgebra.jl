name: 'Propose Version Bump'

on:
  pull_request:
    types:
      - closed
    branches:
      - main 

jobs:
  propose-bump:
    # This job only runs when a PR is successfully merged.
    if: github.event.pull_request.merged == true

    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code.
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # We need history to find the commit by its SHA
          token: ${{ secrets.PAT_FOR_BUMP_PR }}

      # Step 2: Get the merge commit message
      - name: 'Get Merge Commit Message'
        id: commit_message
        run: |
          # Use git log to get the full message of the exact merge commit SHA.
          # The -n 1 flag ensures we only get one commit.
          # The output is set for the next step to use.
          MSG=$(git log --format=%B -n 1 ${{ github.event.pull_request.merge_commit_sha }})
          echo "message<<EOF" >> $GITHUB_OUTPUT
          echo "$MSG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Step 3: Determine bump type and update the Project.toml file.
      - name: 'Calculate Bump and Update Version File'
        id: bump_logic
        shell: python
        run: |
          import os
          import re
          import sys

          # Read the commit message from the previous step's output
          commit_message = os.environ['COMMIT_MESSAGE']

          # Determine bump type based on the Angular Conventional Commit spec
          bump_type = ''
          first_line = commit_message.splitlines()[0]
          
          if re.search(r'BREAKING CHANGE:', commit_message) or re.match(r'^\w+(\([\w-]+\))?!:', first_line):
              bump_type = 'major'
          elif re.match(r'^feat(\([\w-]+\))?:', first_line):
              bump_type = 'minor'
          elif re.match(r'^fix(\([\w-]+\))?:', first_line):
              bump_type = 'patch'

          if not bump_type:
              print('No version bump required for this commit.')
              print('::set-output name=bumped::false')
              sys.exit(0)

          print(f'Determined bump type: {bump_type}')

          try:
              with open('Project.toml', 'r+') as f:
                  content = f.read()
                  version_match = re.search(r'^version\s*=\s*\"(\d+)\.(\d+)\.(\d+)\"', content, re.M)
                  
                  if not version_match:
                      print('Error: Could not find version in Project.toml')
                      sys.exit(1)

                  major, minor, patch = map(int, version_match.groups())
                  
                  if bump_type == 'major': major, minor, patch = major + 1, 0, 0
                  elif bump_type == 'minor': minor, patch = minor + 1, 0
                  elif bump_type == 'patch': patch += 1

                  new_version = f'{major}.{minor}.{patch}'
                  print(f'Bumping version to {new_version}')
                  
                  new_content = re.sub(r'^version\s*=\s*\".*\"', f'version = "{new_version}"', content, count=1, flags=re.M)
                  
                  f.seek(0)
                  f.write(new_content)
                  f.truncate()
                  
                  print(f'::set-output name=new_version::{new_version}')
                  print('::set-output name=bumped::true')

          except FileNotFoundError:
              print('Error: Project.toml not found.')
              sys.exit(1)
        env:
          # Pass the message from the "Get Merge Commit Message" step
          COMMIT_MESSAGE: ${{ steps.commit_message.outputs.message }}

      # Step 4: Create a new pull request with the version bump.
      - name: 'Create Version Bump PR'
        if: steps.bump_logic.outputs.bumped == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.PAT_FOR_BUMP_PR }}
          commit-message: "chore: bump version to ${{ steps.bump_logic.outputs.new_version }}"
          title: "chore: Propose version bump to ${{ steps.bump_logic.outputs.new_version }}"
          body: |
            This PR was automatically generated to propose the next version for the Julia package.
            
            The recommended version bump is to **${{ steps.bump_logic.outputs.new_version }}**. This was determined based on the conventional commit message of the last merged PR.

            Please review and merge to apply the version update.
          branch: "chore/version-bump-${{ steps.bump_logic.outputs.new_version }}"
          labels: 'automated-pr, version_update'
          delete-branch: true